{"ast":null,"code":"var _jsxFileName = \"/Users/ansonyu/Projects/experiments/three-chest/React-Three-Minecraft-Chest/src/components/Three/chest.js\";\n\n/*\nauto-generated by: https://github.com/pmndrs/gltfjsx\n*/\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useGLTF } from \"@react-three/drei/useGLTF\";\nimport * as THREE from \"three\";\nimport { useSpring, a } from \"react-spring/three\"; //Chest open sound\n\nimport chestOpenSound from \"../../assets/sound/open-chest.mp3\";\nconst openChest = new Audio(chestOpenSound);\nexport default function Model(props) {\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(\"../../../coffre-minecraft.glb\");\n  const actions = useRef();\n  const [mixer] = useState(() => new THREE.AnimationMixer());\n  useFrame((state, delta) => mixer.update(delta));\n  useEffect(() => {\n    actions.current = {\n      ArmatureAction: mixer.clipAction(animations[0], group.current)\n    };\n    return () => animations.forEach(clip => mixer.uncacheClip(clip));\n  }, [animations, mixer]); // function for the chest open & audio\n\n  const handleAnimation = () => {\n    props.setOpen(!props.open);\n    openChest.volume = 0.3;\n    openChest.play();\n  }; // Chest open animation\n\n\n  const chestOpen = useSpring({\n    rotation: props.open ? [0, 0, 0] : [1.61, 0, 0],\n    position: props.open ? [0, -1.5, 0] : [0, 0, 0]\n  });\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({\n    onClick: handleAnimation,\n    ref: group\n  }, props, {\n    dispose: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(a.group, {\n    position: [0, -0.99, 0],\n    rotation: chestOpen.position,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: nodes.Bone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(a.primitive, {\n    rotation: chestOpen.rotation,\n    object: nodes.Bone001,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    material: materials.Material,\n    geometry: nodes.Cube.geometry,\n    skeleton: nodes.Cube.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })));\n}\nuseGLTF.preload(\"../../../coffre-minecraft.glb\");","map":{"version":3,"sources":["/Users/ansonyu/Projects/experiments/three-chest/React-Three-Minecraft-Chest/src/components/Three/chest.js"],"names":["React","useRef","useState","useEffect","useFrame","useGLTF","THREE","useSpring","a","chestOpenSound","openChest","Audio","Model","props","group","nodes","materials","animations","actions","mixer","AnimationMixer","state","delta","update","current","ArmatureAction","clipAction","forEach","clip","uncacheClip","handleAnimation","setOpen","open","volume","play","chestOpen","rotation","position","Bone","Bone001","Material","Cube","geometry","skeleton","preload"],"mappings":"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","sourcesContent":["/*\nauto-generated by: https://github.com/pmndrs/gltfjsx\n*/\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useGLTF } from \"@react-three/drei/useGLTF\";\nimport * as THREE from \"three\";\nimport { useSpring, a } from \"react-spring/three\";\n\n//Chest open sound\nimport chestOpenSound from \"../../assets/sound/open-chest.mp3\";\nconst openChest = new Audio(chestOpenSound);\n\nexport default function Model(props) {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\n    \"../../../coffre-minecraft.glb\"\n  );\n  const actions = useRef();\n  const [mixer] = useState(() => new THREE.AnimationMixer());\n  useFrame((state, delta) => mixer.update(delta));\n  useEffect(() => {\n    actions.current = {\n      ArmatureAction: mixer.clipAction(animations[0], group.current),\n    };\n    return () => animations.forEach((clip) => mixer.uncacheClip(clip));\n  }, [animations, mixer]);\n\n  // function for the chest open & audio\n  const handleAnimation = () => {\n    props.setOpen(!props.open);\n    openChest.volume = 0.3;\n    openChest.play();\n  };\n\n  // Chest open animation\n  const chestOpen = useSpring({\n    rotation: props.open ? [0, 0, 0] : [1.61, 0, 0],\n    position: props.open ? [0, -1.5, 0] : [0, 0, 0],\n  });\n\n  return (\n    <group onClick={handleAnimation} ref={group} {...props} dispose={null}>\n      <a.group position={[0, -0.99, 0]} rotation={chestOpen.position}>\n        <primitive object={nodes.Bone} />\n        <a.primitive rotation={chestOpen.rotation} object={nodes.Bone001} />\n        <skinnedMesh\n          castShadow\n          receiveShadow\n          material={materials.Material}\n          geometry={nodes.Cube.geometry}\n          skeleton={nodes.Cube.skeleton}\n        />\n      </a.group>\n    </group>\n  );\n}\n\nuseGLTF.preload(\"../../../coffre-minecraft.glb\");\n"]},"metadata":{},"sourceType":"module"}